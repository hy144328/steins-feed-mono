// This file is auto-generated by @hey-api/openapi-ts

export type BodyLoginTokenPost = {
    grant_type?: string | null;
    username: string;
    password: string;
    scope?: string;
    client_id?: string | null;
    client_secret?: string | null;
};

export type Feed = {
    id: number;
    title: string;
    link: string;
    language: Language | null;
    tags: Array<Tag>;
    displayed: boolean;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

export type Item = {
    id: number;
    title: string;
    link: string;
    published: string;
    summary: string | null;
    feed: Feed;
    like: LikeStatus | null;
    magic: number | null;
    surprise: number | null;
};

export type Language = 'English' | 'French' | 'German' | 'Swedish';

export type LikeStatus = 1 | 0 | -1;

export type Tag = {
    id: number;
    name: string;
};

export type Token = {
    access_token: string;
    token_type: string;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type WallMode = 'Classic' | 'Magic' | 'Random' | 'Surprise';

export type LoginTokenPostData = {
    body: BodyLoginTokenPost;
    path?: never;
    query?: never;
    url: '/token';
};

export type LoginTokenPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginTokenPostError = LoginTokenPostErrors[keyof LoginTokenPostErrors];

export type LoginTokenPostResponses = {
    /**
     * Successful Response
     */
    200: Token;
};

export type LoginTokenPostResponse = LoginTokenPostResponses[keyof LoginTokenPostResponses];

export type TagsFeedsTagsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/feeds/tags/';
};

export type TagsFeedsTagsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<Tag>;
};

export type TagsFeedsTagsGetResponse = TagsFeedsTagsGetResponses[keyof TagsFeedsTagsGetResponses];

export type LanguagesFeedsLanguagesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/feeds/languages/';
};

export type LanguagesFeedsLanguagesGetResponses = {
    /**
     * Successful Response
     */
    200: Array<Language>;
};

export type LanguagesFeedsLanguagesGetResponse = LanguagesFeedsLanguagesGetResponses[keyof LanguagesFeedsLanguagesGetResponses];

export type FeedFeedsFeedFeedIdGetData = {
    body?: never;
    path: {
        feed_id: number;
    };
    query?: never;
    url: '/feeds/feed/{feed_id}';
};

export type FeedFeedsFeedFeedIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type FeedFeedsFeedFeedIdGetError = FeedFeedsFeedFeedIdGetErrors[keyof FeedFeedsFeedFeedIdGetErrors];

export type FeedFeedsFeedFeedIdGetResponses = {
    /**
     * Successful Response
     */
    200: Feed;
};

export type FeedFeedsFeedFeedIdGetResponse = FeedFeedsFeedFeedIdGetResponses[keyof FeedFeedsFeedFeedIdGetResponses];

export type AttachTagFeedsFeedFeedIdAttachTagPutData = {
    body?: never;
    path: {
        feed_id: number;
    };
    query: {
        tag_id: number;
    };
    url: '/feeds/feed/{feed_id}/attach_tag';
};

export type AttachTagFeedsFeedFeedIdAttachTagPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AttachTagFeedsFeedFeedIdAttachTagPutError = AttachTagFeedsFeedFeedIdAttachTagPutErrors[keyof AttachTagFeedsFeedFeedIdAttachTagPutErrors];

export type AttachTagFeedsFeedFeedIdAttachTagPutResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DetachTagFeedsFeedFeedIdDetachTagDeleteData = {
    body?: never;
    path: {
        feed_id: number;
    };
    query: {
        tag_id: number;
    };
    url: '/feeds/feed/{feed_id}/detach_tag';
};

export type DetachTagFeedsFeedFeedIdDetachTagDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DetachTagFeedsFeedFeedIdDetachTagDeleteError = DetachTagFeedsFeedFeedIdDetachTagDeleteErrors[keyof DetachTagFeedsFeedFeedIdDetachTagDeleteErrors];

export type DetachTagFeedsFeedFeedIdDetachTagDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CreateAndAttachTagFeedsFeedFeedIdCreateAndAttachTagPutData = {
    body?: never;
    path: {
        feed_id: number;
    };
    query: {
        tag_name: string;
    };
    url: '/feeds/feed/{feed_id}/create_and_attach_tag';
};

export type CreateAndAttachTagFeedsFeedFeedIdCreateAndAttachTagPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateAndAttachTagFeedsFeedFeedIdCreateAndAttachTagPutError = CreateAndAttachTagFeedsFeedFeedIdCreateAndAttachTagPutErrors[keyof CreateAndAttachTagFeedsFeedFeedIdCreateAndAttachTagPutErrors];

export type CreateAndAttachTagFeedsFeedFeedIdCreateAndAttachTagPutResponses = {
    /**
     * Successful Response
     */
    200: Tag;
};

export type CreateAndAttachTagFeedsFeedFeedIdCreateAndAttachTagPutResponse = CreateAndAttachTagFeedsFeedFeedIdCreateAndAttachTagPutResponses[keyof CreateAndAttachTagFeedsFeedFeedIdCreateAndAttachTagPutResponses];

export type AttachUserFeedsFeedFeedIdAttachUserPutData = {
    body?: never;
    path: {
        feed_id: number;
    };
    query?: never;
    url: '/feeds/feed/{feed_id}/attach_user';
};

export type AttachUserFeedsFeedFeedIdAttachUserPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AttachUserFeedsFeedFeedIdAttachUserPutError = AttachUserFeedsFeedFeedIdAttachUserPutErrors[keyof AttachUserFeedsFeedFeedIdAttachUserPutErrors];

export type AttachUserFeedsFeedFeedIdAttachUserPutResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DetachUserFeedsFeedFeedIdDetachUserDeleteData = {
    body?: never;
    path: {
        feed_id: number;
    };
    query?: never;
    url: '/feeds/feed/{feed_id}/detach_user';
};

export type DetachUserFeedsFeedFeedIdDetachUserDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DetachUserFeedsFeedFeedIdDetachUserDeleteError = DetachUserFeedsFeedFeedIdDetachUserDeleteErrors[keyof DetachUserFeedsFeedFeedIdDetachUserDeleteErrors];

export type DetachUserFeedsFeedFeedIdDetachUserDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UpdateFeedFeedsFeedFeedIdUpdateFeedPostData = {
    body?: never;
    path: {
        feed_id: number;
    };
    query: {
        title: string;
        link: string;
        language?: Language | null;
    };
    url: '/feeds/feed/{feed_id}/update_feed';
};

export type UpdateFeedFeedsFeedFeedIdUpdateFeedPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateFeedFeedsFeedFeedIdUpdateFeedPostError = UpdateFeedFeedsFeedFeedIdUpdateFeedPostErrors[keyof UpdateFeedFeedsFeedFeedIdUpdateFeedPostErrors];

export type UpdateFeedFeedsFeedFeedIdUpdateFeedPostResponses = {
    /**
     * Successful Response
     */
    200: Feed;
};

export type UpdateFeedFeedsFeedFeedIdUpdateFeedPostResponse = UpdateFeedFeedsFeedFeedIdUpdateFeedPostResponses[keyof UpdateFeedFeedsFeedFeedIdUpdateFeedPostResponses];

export type RootItemsGetData = {
    body?: never;
    path?: never;
    query: {
        dt_from: string;
        dt_to: string;
        languages?: Array<Language> | null;
        tags?: Array<number> | null;
        wall_mode?: WallMode;
    };
    url: '/items/';
};

export type RootItemsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RootItemsGetError = RootItemsGetErrors[keyof RootItemsGetErrors];

export type RootItemsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<Item>;
};

export type RootItemsGetResponse = RootItemsGetResponses[keyof RootItemsGetResponses];

export type LikeItemsLikePutData = {
    body?: never;
    path?: never;
    query: {
        item_id: number;
        score: LikeStatus;
    };
    url: '/items/like/';
};

export type LikeItemsLikePutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LikeItemsLikePutError = LikeItemsLikePutErrors[keyof LikeItemsLikePutErrors];

export type LikeItemsLikePutResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AnalyzeTitleItemsAnalyzeTitleGetData = {
    body?: never;
    path?: never;
    query: {
        item_id: number;
    };
    url: '/items/analyze_title';
};

export type AnalyzeTitleItemsAnalyzeTitleGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AnalyzeTitleItemsAnalyzeTitleGetError = AnalyzeTitleItemsAnalyzeTitleGetErrors[keyof AnalyzeTitleItemsAnalyzeTitleGetErrors];

export type AnalyzeTitleItemsAnalyzeTitleGetResponses = {
    /**
     * Successful Response
     */
    200: Array<[
        string,
        string,
        number
    ]>;
};

export type AnalyzeTitleItemsAnalyzeTitleGetResponse = AnalyzeTitleItemsAnalyzeTitleGetResponses[keyof AnalyzeTitleItemsAnalyzeTitleGetResponses];

export type AnalyzeSummaryItemsAnalyzeSummaryGetData = {
    body?: never;
    path?: never;
    query: {
        item_id: number;
    };
    url: '/items/analyze_summary';
};

export type AnalyzeSummaryItemsAnalyzeSummaryGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AnalyzeSummaryItemsAnalyzeSummaryGetError = AnalyzeSummaryItemsAnalyzeSummaryGetErrors[keyof AnalyzeSummaryItemsAnalyzeSummaryGetErrors];

export type AnalyzeSummaryItemsAnalyzeSummaryGetResponses = {
    /**
     * Successful Response
     */
    200: Array<[
        string,
        string,
        number
    ]>;
};

export type AnalyzeSummaryItemsAnalyzeSummaryGetResponse = AnalyzeSummaryItemsAnalyzeSummaryGetResponses[keyof AnalyzeSummaryItemsAnalyzeSummaryGetResponses];

export type RootGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type RootGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ClientOptions = {
    baseUrl: 'http://localhost:8000' | (string & {});
};