// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer } from '@hey-api/client-fetch';
import type { LoginTokenPostData, LoginTokenPostResponse, LoginTokenPostError, TagsFeedsTagsGetData, TagsFeedsTagsGetResponse, LanguagesFeedsLanguagesGetData, LanguagesFeedsLanguagesGetResponse, FeedFeedsFeedFeedIdGetData, FeedFeedsFeedFeedIdGetResponse, FeedFeedsFeedFeedIdGetError, AttachTagFeedsFeedFeedIdAttachTagPutData, AttachTagFeedsFeedFeedIdAttachTagPutError, DetachTagFeedsFeedFeedIdDetachTagDeleteData, DetachTagFeedsFeedFeedIdDetachTagDeleteError, CreateAndAttachTagFeedsFeedFeedIdCreateAndAttachTagPutData, CreateAndAttachTagFeedsFeedFeedIdCreateAndAttachTagPutResponse, CreateAndAttachTagFeedsFeedFeedIdCreateAndAttachTagPutError, AttachUserFeedsFeedFeedIdAttachUserPutData, AttachUserFeedsFeedFeedIdAttachUserPutError, DetachUserFeedsFeedFeedIdDetachUserDeleteData, DetachUserFeedsFeedFeedIdDetachUserDeleteError, UpdateFeedFeedsFeedFeedIdUpdateFeedPostData, UpdateFeedFeedsFeedFeedIdUpdateFeedPostResponse, UpdateFeedFeedsFeedFeedIdUpdateFeedPostError, RootItemsGetData, RootItemsGetResponse, RootItemsGetError, LastUpdatedItemsLastUpdatedGetData, LastUpdatedItemsLastUpdatedGetResponse, LastUpdatedItemsLastUpdatedGetError, LikeItemsLikePutData, LikeItemsLikePutError, AnalyzeTitleItemsAnalyzeTitleGetData, AnalyzeTitleItemsAnalyzeTitleGetResponse, AnalyzeTitleItemsAnalyzeTitleGetError, AnalyzeSummaryItemsAnalyzeSummaryGetData, AnalyzeSummaryItemsAnalyzeSummaryGetResponse, AnalyzeSummaryItemsAnalyzeSummaryGetError, RootGetData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Login
 */
export const loginTokenPost = <ThrowOnError extends boolean = false>(options: Options<LoginTokenPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginTokenPostResponse, LoginTokenPostError, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/token',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Tags
 */
export const tagsFeedsTagsGet = <ThrowOnError extends boolean = false>(options?: Options<TagsFeedsTagsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TagsFeedsTagsGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/feeds/tags/',
        ...options
    });
};

/**
 * Languages
 */
export const languagesFeedsLanguagesGet = <ThrowOnError extends boolean = false>(options?: Options<LanguagesFeedsLanguagesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<LanguagesFeedsLanguagesGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/feeds/languages/',
        ...options
    });
};

/**
 * Feed
 */
export const feedFeedsFeedFeedIdGet = <ThrowOnError extends boolean = false>(options: Options<FeedFeedsFeedFeedIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FeedFeedsFeedFeedIdGetResponse, FeedFeedsFeedFeedIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/feeds/feed/{feed_id}',
        ...options
    });
};

/**
 * Attach Tag
 */
export const attachTagFeedsFeedFeedIdAttachTagPut = <ThrowOnError extends boolean = false>(options: Options<AttachTagFeedsFeedFeedIdAttachTagPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, AttachTagFeedsFeedFeedIdAttachTagPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/feeds/feed/{feed_id}/attach_tag',
        ...options
    });
};

/**
 * Detach Tag
 */
export const detachTagFeedsFeedFeedIdDetachTagDelete = <ThrowOnError extends boolean = false>(options: Options<DetachTagFeedsFeedFeedIdDetachTagDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DetachTagFeedsFeedFeedIdDetachTagDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/feeds/feed/{feed_id}/detach_tag',
        ...options
    });
};

/**
 * Create And Attach Tag
 */
export const createAndAttachTagFeedsFeedFeedIdCreateAndAttachTagPut = <ThrowOnError extends boolean = false>(options: Options<CreateAndAttachTagFeedsFeedFeedIdCreateAndAttachTagPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CreateAndAttachTagFeedsFeedFeedIdCreateAndAttachTagPutResponse, CreateAndAttachTagFeedsFeedFeedIdCreateAndAttachTagPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/feeds/feed/{feed_id}/create_and_attach_tag',
        ...options
    });
};

/**
 * Attach User
 */
export const attachUserFeedsFeedFeedIdAttachUserPut = <ThrowOnError extends boolean = false>(options: Options<AttachUserFeedsFeedFeedIdAttachUserPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, AttachUserFeedsFeedFeedIdAttachUserPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/feeds/feed/{feed_id}/attach_user',
        ...options
    });
};

/**
 * Detach User
 */
export const detachUserFeedsFeedFeedIdDetachUserDelete = <ThrowOnError extends boolean = false>(options: Options<DetachUserFeedsFeedFeedIdDetachUserDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DetachUserFeedsFeedFeedIdDetachUserDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/feeds/feed/{feed_id}/detach_user',
        ...options
    });
};

/**
 * Update Feed
 */
export const updateFeedFeedsFeedFeedIdUpdateFeedPost = <ThrowOnError extends boolean = false>(options: Options<UpdateFeedFeedsFeedFeedIdUpdateFeedPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateFeedFeedsFeedFeedIdUpdateFeedPostResponse, UpdateFeedFeedsFeedFeedIdUpdateFeedPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/feeds/feed/{feed_id}/update_feed',
        ...options
    });
};

/**
 * Root
 */
export const rootItemsGet = <ThrowOnError extends boolean = false>(options: Options<RootItemsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RootItemsGetResponse, RootItemsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/items/',
        ...options
    });
};

/**
 * Last Updated
 */
export const lastUpdatedItemsLastUpdatedGet = <ThrowOnError extends boolean = false>(options?: Options<LastUpdatedItemsLastUpdatedGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<LastUpdatedItemsLastUpdatedGetResponse, LastUpdatedItemsLastUpdatedGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/items/last_updated',
        ...options
    });
};

/**
 * Like
 */
export const likeItemsLikePut = <ThrowOnError extends boolean = false>(options: Options<LikeItemsLikePutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, LikeItemsLikePutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/items/like/',
        ...options
    });
};

/**
 * Analyze Title
 */
export const analyzeTitleItemsAnalyzeTitleGet = <ThrowOnError extends boolean = false>(options: Options<AnalyzeTitleItemsAnalyzeTitleGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AnalyzeTitleItemsAnalyzeTitleGetResponse, AnalyzeTitleItemsAnalyzeTitleGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/items/analyze_title',
        ...options
    });
};

/**
 * Analyze Summary
 */
export const analyzeSummaryItemsAnalyzeSummaryGet = <ThrowOnError extends boolean = false>(options: Options<AnalyzeSummaryItemsAnalyzeSummaryGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AnalyzeSummaryItemsAnalyzeSummaryGetResponse, AnalyzeSummaryItemsAnalyzeSummaryGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/items/analyze_summary',
        ...options
    });
};

/**
 * Root
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: Options<RootGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};